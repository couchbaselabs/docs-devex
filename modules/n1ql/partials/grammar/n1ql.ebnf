/* SQL++ for Query (N1QL) */

/**************
 * Statements *
 **************/

sequence ::= statement ( ';' statement )* ';'?

statement ::= dcl-statement |
              ddl-statement |
              dml-statement |
              dql-statement |
              tcl-statement |
              utility-statement

dcl-statement ::= [https://github.com/couchbaselabs/docs-devex/blob/capella/modules/n1ql/partials/grammar/dcl.ebnf]
ddl-statement ::= [https://github.com/couchbaselabs/docs-devex/blob/capella/modules/n1ql/partials/grammar/ddl.ebnf]
dml-statement ::= [https://github.com/couchbaselabs/docs-devex/blob/capella/modules/n1ql/partials/grammar/dml.ebnf]
dql-statement ::= [https://github.com/couchbaselabs/docs-devex/blob/capella/modules/n1ql/partials/grammar/dql.ebnf]
tcl-statement ::= [https://github.com/couchbaselabs/docs-devex/blob/capella/modules/n1ql/partials/grammar/tcl.ebnf]

utility-statement ::= [https://github.com/couchbaselabs/docs-devex/blob/capella/modules/n1ql/partials/grammar/utility.ebnf]


/***************
 * Expressions *
 ***************/

expr ::= literal |
         identifier |
         arithmetic-term |
         comparison-term |
         concatenation-term |
         logical-term |
         case-expr |
         collection-expr |
         construction-expr |
         nested-expr |
         function-call |
         subquery-expr |
         '(' expr ')'


/* Literal */

literal ::= string | number | boolean | null | missing

/* tag::string[] */
string ::= '"' char* '"' | "'" char* "'"
/* end::string[] */

/* NOTE: double-quoted string must not contain unescaped double-quote */
/* NOTE: single-quoted string must not contain unescaped single-quote */

/* tag::char[] */
char ::= unicode-character |
         '\' ( '\' | '"' | "'" | 'b' | 'f' | 'n' | 'r' | 't' | 'u' hex hex hex hex )
/* end::char[] */

/* NOTE: unicode-character may be TAB, LF, or CR, but must not be backslash */

/* tag::hex[] */
hex ::= [0-9a-fA-F]
/* end::hex[] */

/* tag::number[] */
number ::= '-'? integer fraction? exponent?
/* end::number[] */

/* tag::integer[] */
integer ::= [0-9] | [1-9] [0-9]+
/* end::integer[] */

/* tag::fraction[] */
fraction ::= '.' [0-9]+
/* end::fraction[] */

/* tag::exponent[] */
exponent ::= ('e' | 'E') ('-' | '+')? [0-9]+
/* end::exponent[] */

/* tag::boolean[] */
boolean ::= 'TRUE' | 'FALSE'
/* end::boolean[] */

/* tag::null[] */
null ::= 'NULL'
/* end::null[] */

/* tag::missing[] */
missing ::= 'MISSING'
/* end::missing[] */


/* Identifier */

/* tag::identifier[] */
identifier ::= unescaped-identifier | escaped-identifier
/* end::identifier[] */

/* tag::unescaped-identifier[] */
unescaped-identifier ::= [a-zA-Z_] ( [0-9a-zA-Z_$] )*
/* end::unescaped-identifier[] */

/* tag::escaped-identifier[] */
escaped-identifier ::= '`' char+ '`'
/* end::escaped-identifier[] */


/* Arithmetic Terms */

/* tag::arithmetic-term[] */
arithmetic-term ::= expr '+' expr |
                    expr '-' expr |
                    expr '*' expr |
                    expr '/' expr |
                    expr '%' expr |
                    '-' expr
/* end::arithmetic-term[] */


/* Comparison Terms */

comparison-term ::= relational-expr |
                    between-expr |
                    like-expr |
                    is-expr

/* tag::relational-expr[] */
relational-expr ::= expr '=' expr |
                    expr '==' expr |
                    expr '!=' expr |
                    expr '<>' expr |
                    expr '>' expr |
                    expr '>=' expr |
                    expr '<' expr |
                    expr '<=' expr
/* end::relational-expr[] */

/* tag::between-expr[] */
between-expr ::= expr 'NOT'? 'BETWEEN' start-expr 'AND' end-expr
/* end::between-expr[] */

/* tag::like-expr[] */
like-expr ::= expr 'NOT'? 'LIKE' expr
/* end::like-expr[] */

/* tag::is-expr[] */
is-expr ::= expr 'IS' 'NOT'? 'NULL' |
            expr 'IS' 'NOT'? 'MISSING' |
            expr 'IS' 'NOT'? 'VALUED'
/* end::is-expr[] */


/* Concatenation Terms */

/* tag::concatenation-term[] */
concatenation-term ::= expr '||' expr
/* end::concatenation-term[] */


/* Logical Terms */

logical-term ::= and | or | not

/* tag::and[] */
and ::= cond 'AND' cond
/* end::and[] */

/* tag::or[] */
or ::= cond 'OR' cond
/* end::or[] */

/* tag::not[] */
not ::= 'NOT' cond
/* end::not[] */


/* Case Expressions */

/* tag::case-expr[] */
case-expr ::= simple-case-expr | searched-case-expr
/* end::case-expr[] */

/* tag::simple-case-expr[] */
simple-case-expr ::= 'CASE' expr ('WHEN' expr 'THEN' expr)+ ('ELSE' expr)? 'END'
/* end::simple-case-expr[] */

/* tag::searched-case-expr[] */
searched-case-expr ::= 'CASE' ('WHEN' cond 'THEN' expr)+ ('ELSE' expr)? 'END'
/* end::searched-case-expr[] */


/* Collection Expressions */

collection-expr ::= exists-expr | in-expr | within-expr | range-cond | range-xform

/* tag::exists-expr[] */
exists-expr ::= 'EXISTS' expr
/* end::exists-expr[] */

/* tag::in-expr[] */
in-expr ::= search-expr 'NOT'? 'IN' target-expr
/* end::in-expr[] */

/* tag::within-expr[] */
within-expr ::= search-expr 'NOT'? 'WITHIN' target-expr
/* end::within-expr[] */

/* tag::range-cond[] */
range-cond ::= ( ( 'ANY' | 'SOME' ) ( 'AND' 'EVERY' )? | 'EVERY' )
               range 'SATISFIES' cond 'END'
/* end::range-cond[] */

/* tag::range-xform[] */
range-xform ::= ( ( 'ARRAY' | 'FIRST' ) | 'OBJECT' name-expr ':' ) var-expr
                'FOR' range ( 'WHEN' cond )? 'END'
/* end::range-xform[] */

/* tag::range[] */
range ::= ( name-var ':' )? var ( 'IN' | 'WITHIN' ) expr
    ( ',' ( name-var ':' )? var ( 'IN' | 'WITHIN' ) expr )*
/* end::range[] */

search-expr ::= expr
target-expr ::= expr
var-expr ::= expr
name-expr ::= expr
var ::= identifier
name-var ::= identifier


/* Construction Expressions */

construction-expr ::= object | array

/* tag::object[] */
object ::= '{' ( ( name-expr ':' )? expr (',' ( name-expr ':' )? expr)* )? '}'
/* end::object[] */

/* tag::array[] */
array ::= '[' ( expr ( ',' expr )* )? ']'
/* end::array[] */


/* Nested Expressions */

/* tag::nested-expr[] */
nested-expr ::= field-expr | element-expr | slice-expr
/* end::nested-expr[] */

/* tag::field-expr[] */
field-expr ::= expr '.' ( identifier | ( ( escaped-identifier | '[' name-expr ']' ) 'i'? ) )
/* end::field-expr[] */

/* tag::element-expr[] */
element-expr ::= expr '[' position ']'
/* end::element-expr[] */

/* tag::slice-expr[] */
slice-expr ::= expr '[' start-expr ':' end-expr? ']'
/* end::slice-expr[] */

start-expr ::= expr
end-expr ::= expr
position ::= expr

/* Function Calls */

function-call ::= ordinary-function |
                  aggregate-function |
                  window-function

function-name ::= identifier
aggregate-function-name ::= identifier
window-function-name ::= identifier

ordinary-function ::= function-name '(' ( expr ( ',' expr )* )? ')'

/* tag::aggregate-function[] */
aggregate-function ::= aggregate-function-name '(' ( aggregate-quantifier? expr |
                       ( path '.' )? '*' ) ')' filter-clause? over-clause?
/* end::aggregate-function[] */

/* tag::aggregate-quantifier[] */
aggregate-quantifier ::= 'ALL' | 'DISTINCT'
/* end::aggregate-quantifier[] */

/* tag::filter-clause[] */
filter-clause ::= 'FILTER' '(' 'WHERE' cond ')'
/* end::filter-clause[] */

/* tag::window-function[] */
window-function ::= window-function-name '(' window-function-arguments ')'
                    window-function-options? over-clause
/* end::window-function[] */

/* tag::window-function-arguments[] */
window-function-arguments ::= ( expr ( ',' expr ( ',' expr )? )? )?
/* end::window-function-arguments[] */

/* tag::window-function-options[] */
window-function-options ::= nthval-from? nulls-treatment?
/* end::window-function-options[] */

/* tag::nthval-from[] */
nthval-from ::= 'FROM' ( 'FIRST' | 'LAST' )
/* end::nthval-from[] */

/* tag::nulls-treatment[] */
nulls-treatment ::= ( 'RESPECT' | 'IGNORE' ) 'NULLS'
/* end::nulls-treatment[] */

/* tag::over-clause[] */
over-clause ::= 'OVER' ( '(' window-definition ')' | window-ref )
/* end::over-clause[] */


/* Subquery Expressions */

/* tag::subquery-expr[] */
subquery-expr ::= '(' select ')'
/* end::subquery-expr[] */


/************
 * Comments *
 ************/

comment ::= block-comment | line-comment

/* tag::block-comment[] */
block-comment ::= '/*' ( text | newline )* '*/'
/* end::block-comment[] */

/* tag::line-comment[] */
line-comment ::=  '--' text?
/* end::line-comment[] */

/* NOTE: block-comment text must not contain asterisk-slash or asterisk-backslash-slash */

/**************
 * Additional *
 **************/

/* Date-Time Functions */

/* tag::format-specifier[] */
format-specifier ::= '%' ( '%' | ( '-' | '_' | '0' | '^' )? width? element)
/* end::format-specifier[] */

width ::= integer
element ::= [a-zA-Z]


/* Window Functions */

/* tag::cume-dist-function[] */
cume-dist-function ::= 'CUME_DIST' '()' 'OVER' ( '(' window-definition ')' | window-ref )
/* end::cume-dist-function[] */

/* tag::dense-rank-function[] */
dense-rank-function ::= 'DENSE_RANK' '()' 'OVER' ( '(' window-definition ')' | window-ref )
/* end::dense-rank-function[] */

/* tag::first-value-function[] */
first-value-function ::= 'FIRST_VALUE' '(' expr ')' nulls-treatment?
                         'OVER' ( '(' window-definition ')' | window-ref )
/* end::first-value-function[] */

/* tag::lag-function[] */
lag-function ::= 'LAG' '(' expr ( ',' offset ( ',' default )? )? ')' nulls-treatment?
                 'OVER' ( '(' window-definition ')' | window-ref )
/* end::lag-function[] */

/* tag::last-value-function[] */
last-value-function ::= 'LAST_VALUE' '(' expr ')' nulls-treatment?
                        'OVER' ( '(' window-definition ')' | window-ref )
/* end::last-value-function[] */

/* tag::lead-function[] */
lead-function ::= 'LEAD' '(' expr ( ',' offset ( ',' default )? )? ')' nulls-treatment?
                  'OVER' ( '(' window-definition ')' | window-ref )
/* end::lead-function[] */

/* tag::nth-value-function[] */
nth-value-function ::= 'NTH_VALUE' '(' expr ',' offset ')' nthval-from? nulls-treatment?
                       'OVER' ( '(' window-definition ')' | window-ref )
/* end::nth-value-function[] */

/* tag::ntile-function[] */
ntile-function ::= 'NTILE' '(' num_tiles ')'
                   'OVER' ( '(' window-definition ')' | window-ref )
/* end::ntile-function[] */

/* tag::percent-rank-function[] */
percent-rank-function ::= 'PERCENT_RANK' '()'
                          'OVER' ( '(' window-definition ')' | window-ref )
/* end::percent-rank-function[] */

/* tag::rank-function[] */
rank-function ::= 'RANK' '()' 'OVER' ( '(' window-definition ')' | window-ref )
/* end::rank-function[] */

/* tag::ratio-to-report-function[] */
ratio-to-report-function ::= 'RATIO_TO_REPORT' '(' expr ')'
                             'OVER' ( '(' window-definition ')' | window-ref )
/* end::ratio-to-report-function[] */

/* tag::row-number-function[] */
row-number-function ::= 'ROW_NUMBER' '()' 'OVER' ( '(' window-definition ')' | window-ref )
/* end::row-number-function[] */

offset ::= expr
default ::= expr
num_tiles ::= expr
